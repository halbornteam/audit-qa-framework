{
  "protocol": "Staking / Locking Systems Security Tests",
  "tags": [
    {
      "tag": "Fixed Lock Duration",
      "test_cases": [
        {
          "id": "SLS-FLD-01",
          "test_case": "Fixed lock duration enforcement",
          "detailed_procedure": "- lock(100 ether) for a constant LOCK_PERIOD (e.g., 30 days)\n- Warp/advance time by LOCK_PERIOD - 1 second\n- Call unlock() and expect revert with error LOCK_NOT_EXPIRED\n- Warp/advance time by +2 seconds so that now > LOCK_PERIOD\n- Call unlock() again and expect the tx to succeed; the user's token balance should increase by exactly 100 ether; contract state (totalLocked) should be 0",
          "pass_fail_criteria": "1. unlock() reverts with LOCK_NOT_EXPIRED until full LOCK_PERIOD elapsed\n2. After period, unlock() succeeds and returns full principal; no partial or early unlock allowed"
        },
        {
          "id": "SLS-FLD-02",
          "test_case": "Timestamp handling",
          "detailed_procedure": "- lock() a position and record block.timestamp as start\n- Query contract getter (e.g., position.unlockTime) and assert it equals start + LOCK_PERIOD\n- Audit arithmetic: check that all time calculations use unchecked{ } only when safe, and avoid overflow when adding durations on 64-bit block.timestamp\n- Run slither/echidna fuzz on functions that perform time math to confirm no wrap-around occurs",
          "pass_fail_criteria": "No arithmetic or time manipulation issues are present"
        },
        {
          "id": "SLS-FLD-03",
          "test_case": "Early unlock simulation",
          "detailed_procedure": "Lock tokens and attempt early withdrawal before the lock duration ends",
          "pass_fail_criteria": "Tokens cannot be withdrawn or accessed before the exact unlock time"
        }
      ]
    },
    {
      "tag": "Flexible Unstake",
      "test_cases": [
        {
          "id": "SLS-FU-01",
          "test_case": "Unstake logic correctness",
          "detailed_procedure": "Scenario A (happy):\n  1. Stake 1 ETH worth of tokens via stake(amount).\n  2. Immediately call unstake(amount) from the same EOA and expect success.\n\nScenario B (early exit fee):\n  1. Stake 10 ETH; advance time halfway through REWARD_PERIOD.\n  2. Call unstake(10 ETH).\n  3. Expect a PENALTY_FEE (e.g., 1%) to be deducted; assert user receives 9.9 ETH and penaltyReceiver receives 0.1 ETH.\n\nScenario C (unauthorized):\n  1. Address A stakes; Address B calls unstake() on A's position.\n  2. Expect revert UNAUTHORIZED.",
          "pass_fail_criteria": "Users can unstake their tokens at any time if flexible unstake is enabled"
        },
        {
          "id": "SLS-FU-02",
          "test_case": "Penalty enforcement",
          "detailed_procedure": "- Stake 100 tokens via stake(100).\n- Immediately call unstake(100).\n  • Expect PENALTY_PCT (e.g., 2%) to be withheld.\n  • Verify user receives 98 tokens and PenaltyTreasury receives 2 tokens.\n- Advance time beyond PENALTY_FREE_PERIOD.\n- Stake another 100 tokens, advance time >= PENALTY_FREE_PERIOD, call unstake(100) again.\n  • Expect full 100 tokens returned, no fee, PenaltyTreasury unchanged.\n- Check FeeApplied event contains correct fee and recipient.",
          "pass_fail_criteria": "1. Early unstake always applies correct fee.\n2. Unstake after grace period returns full amount.\n3. Fee transferred to PenaltyTreasury and FeeApplied(uint256,address) emitted."
        },
        {
          "id": "SLS-FU-03",
          "test_case": "Permission scope",
          "detailed_procedure": "- Address A stakes 10 tokens.\n- Address B (unauthorized) calls unstake(10) specifying Address A's position/ID.\n- Expect revert UNAUTHORIZED or custom error AccessDenied().\n- Repeat with a contract that tries the same delegatecall pattern.",
          "pass_fail_criteria": "Unauthorized entities cannot unstake on behalf of others; function reverts with explicit access-control error."
        },
        {
          "id": "SLS-FU-04",
          "test_case": "Unstake simulation",
          "detailed_procedure": "Edge-case fuzzing:\n- Stake 50 tokens, then call unstake(10) in same block → expect 40 tokens staked remaining.\n- Stake again 20 tokens, advance time half REWARD_PERIOD, unstakeAll() → fee only on reward-eligible portion if designed so.\n- Call unstake(0) and expect revert INVALID_AMOUNT.",
          "pass_fail_criteria": "Unstaking any valid amount succeeds within design rules; invalid or zero amounts revert; partial and multi-call sequences keep accounting consistent."
        },
        {
          "id": "SLS-FU-05",
          "test_case": "State updates post-unstake",
          "detailed_procedure": "- After each unstake call, query: position.amount, userStake, totalPoolStake, and pendingRewards.\n- Confirm:\n  • position.amount decreases by exact unstaked amount.\n  • totalPoolStake mirrors aggregate change.\n  • pendingRewards reset or updated per contract logic.\n  • Emit Unstake(address user,uint256 amount) event.",
          "pass_fail_criteria": "All staking-related state vars and events reflect the unstake accurately with no off-by-one or rounding drift."
        }
      ]
    },
    {
      "tag": "Early Withdrawal Penalty",
      "test_cases": [
        {
          "id": "SLS-EWP-01",
          "test_case": "Penalty calculation",
          "detailed_procedure": "Review how the penalty is calculated. Is it a fixed amount, a percentage of the staked amount, or based on time remaining? Ensure that the formula is clear, consistent, and immune to rounding/precision errors",
          "pass_fail_criteria": "Penalty amount is accurate and based on transparent, fixed logic"
        },
        {
          "id": "SLS-EWP-02",
          "test_case": "Penalty application",
          "detailed_procedure": "Check that the penalty is correctly subtracted from the user's withdrawal. Confirm where the penalty goes (e.g., burned, redistributed, sent to treasury). Simulate a variety of early withdrawal scenarios and validate outputs",
          "pass_fail_criteria": "All deducted penalties are correctly routed to the intended destination"
        },
        {
          "id": "SLS-EWP-03",
          "test_case": "Penalty enforcement",
          "detailed_procedure": "Ensure that no user, including privileged roles, can bypass or alter penalty logic arbitrarily (unless explicitly documented and access-controlled)",
          "pass_fail_criteria": "No bypass is possible via role-based access or clever transaction timing"
        }
      ]
    },
    {
      "tag": "Reward Distribution Logic",
      "test_cases": [
        {
          "id": "SLS-RDL-01",
          "test_case": "Excessive delay",
          "detailed_procedure": "Check if users can lock small amounts to delay the reward distribution",
          "pass_fail_criteria": "Presence of time controls and constraints on reward distributions"
        },
        {
          "id": "SLS-RDL-02",
          "test_case": "Premature claim",
          "detailed_procedure": "Check if users can claim their rewards prematurely",
          "pass_fail_criteria": "Premature claim is blocked"
        },
        {
          "id": "SLS-RDL-03",
          "test_case": "Outdated rewards",
          "detailed_procedure": "Ensure that the reward update function must be called before all relevant operations",
          "pass_fail_criteria": "The update reward function is called properly in all places where the reward is relevant"
        },
        {
          "id": "SLS-RDL-04",
          "test_case": "Precision Loss",
          "detailed_procedure": "Ensure that the reward distribution formula is safe from precision loss issues such as division before multiplication, rounding down to zero, unsafe casting etc.",
          "pass_fail_criteria": "Formula is accurate and precise"
        },
        {
          "id": "SLS-RDL-05",
          "test_case": "Distribution fairness",
          "detailed_procedure": "Ensure that reward scaling is fair based on user stake and staking duration",
          "pass_fail_criteria": "Rewards are distributed proportionally to stake and staking time"
        }
      ]
    },
    {
      "tag": "Multiplier Boosts",
      "test_cases": [
        {
          "id": "SLS-MB-01",
          "test_case": "Multiplier consistency",
          "detailed_procedure": "Confirm that multiplier rules are consistent and can't be manipulated mid-stake",
          "pass_fail_criteria": "Multipliers are correctly assigned based on transparent, fair, and immutable logic"
        },
        {
          "id": "SLS-MB-02",
          "test_case": "Boosted reward calculation",
          "detailed_procedure": "Ensure the multiplier only affects reward rate, not actual stake balance or voting power (unless intended)",
          "pass_fail_criteria": "Boosted rewards are calculated accurately without affecting unrelated staking metrics"
        },
        {
          "id": "SLS-MB-03",
          "test_case": "Boost eligibility",
          "detailed_procedure": "Confirm that rewards are multiplied only after proper eligibility verification; Stake below and above boost thresholds: verify correct multiplier assignment",
          "pass_fail_criteria": "Only eligible users receive boosts; ineligible users are properly excluded"
        },
        {
          "id": "SLS-MB-04",
          "test_case": "Access control on boost configuration",
          "detailed_procedure": "Check who can set or modify boost logic; Ensure that any admin-set multipliers are access-controlled and logged (e.g., through events)",
          "pass_fail_criteria": "Boost settings cannot be arbitrarily changed or exploited during or after staking; Admin controls for boost configuration are secure and auditable"
        }
      ]
    },
    {
      "tag": "Time-weighted Voting Power",
      "test_cases": [
        {
          "id": "SLS-TWVP-01",
          "test_case": "Stake correlation",
          "detailed_procedure": "Ensure that the voting power formula factors in both the staked amount and staking duration",
          "pass_fail_criteria": "Voting power accurately reflects both stake amount and duration"
        },
        {
          "id": "SLS-TWVP-02",
          "test_case": "Stake timing manipulation",
          "detailed_procedure": "Ensure users can't gain unfair voting influence by repeatedly staking/unstaking",
          "pass_fail_criteria": "No user can obtain outsized influence through stake timing manipulation"
        },
        {
          "id": "SLS-TWVP-03",
          "test_case": "Voting power correctness",
          "detailed_procedure": "Confirm that power is snapshot-based or calculated dynamically at vote time",
          "pass_fail_criteria": "Voting power updates are automatic and irreversible without stake modification"
        },
        {
          "id": "SLS-TWVP-04",
          "test_case": "Decay/Reduction mechanism",
          "detailed_procedure": "If voting power decays over time after locking ends, ensure it's implemented correctly; Confirm that users who unlock early lose proportional voting power",
          "pass_fail_criteria": "Users retain voting power after unlocking/withdrawing"
        },
        {
          "id": "SLS-TWVP-05",
          "test_case": "Snapshot system",
          "detailed_procedure": "Verify consistency between snapshots and actual user power at the time of a vote",
          "pass_fail_criteria": "Any snapshot-based system reliably reflects historical states"
        }
      ]
    },
    {
      "tag": "Staking with NFTs",
      "test_cases": [
        {
          "id": "SLS-SWN-01",
          "test_case": "NFT ownership",
          "detailed_procedure": "Verify that only the NFT owner can stake or unstake",
          "pass_fail_criteria": "NFTs can be staked, tracked, and unstaked securely by rightful owners"
        },
        {
          "id": "SLS-SWN-02",
          "test_case": "NFT-compliant",
          "detailed_procedure": "Confirm that contract respects the ERC-721 receive hooks (onERC721Received) to avoid NFT loss",
          "pass_fail_criteria": "The contract is ERC721/ERC1155-compliant and handles edge cases like hooks and reentrancy safely"
        },
        {
          "id": "SLS-SWN-03",
          "test_case": "NFT-related reward logic",
          "detailed_procedure": "If NFT attributes (e.g., rarity, tier, metadata) influence rewards, confirm: The attributes are immutable or trustlessly verifiable; The reward multipliers are correctly assigned and non-manipulable. Simulate different NFT types and verify the expected reward behavior",
          "pass_fail_criteria": "Reward boosts (if applicable) are correctly tied to verifiable NFT traits or types"
        },
        {
          "id": "SLS-SWN-04",
          "test_case": "NFT returns on unstake",
          "detailed_procedure": "Verify that NFTs are returned to the original staker only; Test emergency unstake or claim scenarios and ensure NFT recovery",
          "pass_fail_criteria": "NFTs are returned correctly and without loss under all conditions, including emergency or error states"
        }
      ]
    },
    {
      "tag": "Auto-reward Claim",
      "test_cases": [
        {
          "id": "SLS-ARC-01",
          "test_case": "Reward manipulation",
          "detailed_procedure": "Ensure rewards are updated and transferred before any state changes",
          "pass_fail_criteria": "No user can lose or double-claim rewards due to state mismanagement"
        },
        {
          "id": "SLS-ARC-02",
          "test_case": "Trigger simulation",
          "detailed_procedure": "Stake additional tokens and confirm past rewards are automatically claimed; Unstake partially or fully and confirm rewards are claimed prior to token return; Call claim manually and ensure logic does not break when auto-claim is triggered again",
          "pass_fail_criteria": "Rewards are accurately and automatically claimed on designated trigger actions"
        },
        {
          "id": "SLS-ARC-03",
          "test_case": "Inconsistent accounting",
          "detailed_procedure": "Ensure the reward debt or index (e.g., rewardPerTokenPaid) is updated consistently across all auto-claim triggers",
          "pass_fail_criteria": "Internal accounting (e.g., user reward balance, pool reward index) is consistent and secure"
        }
      ]
    },
    {
      "tag": "Locking for Governance Power",
      "test_cases": [
        {
          "id": "SLS-LFGP-01",
          "test_case": "Transferrable power",
          "detailed_procedure": "Confirm that voting power is non-transferable and tightly coupled to the locked state",
          "pass_fail_criteria": "Governance power is only granted to users with valid, locked tokens"
        },
        {
          "id": "SLS-LFGP-02",
          "test_case": "Stake correlation",
          "detailed_procedure": "Ensure that the voting power formula factors in both the staked amount and staking duration",
          "pass_fail_criteria": "Governance power accurately reflects both stake amount and duration"
        },
        {
          "id": "SLS-LFGP-03",
          "test_case": "Stale voting power",
          "detailed_procedure": "Confirm that voting power updates dynamically (if designed to) or uses proper snapshots for fixed-power voting",
          "pass_fail_criteria": "Voting power is dynamic and up-to-date"
        },
        {
          "id": "SLS-LFGP-04",
          "test_case": "No lock voting",
          "detailed_procedure": "Ensure no user or admin can assign arbitrary governance power without locking",
          "pass_fail_criteria": "Voting power cannot be faked, transferred, or granted without a valid lock"
        },
        {
          "id": "SLS-LFGP-05",
          "test_case": "Flashloan protection",
          "detailed_procedure": "Ensure that users are not able to lock and unlock tokens within the same block",
          "pass_fail_criteria": "Flash loans are prevented via minimum lock duration enforcement"
        }
      ]
    }
  ]
} 