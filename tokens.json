{
  "protocol": "Token Contract Security Tests",
  "tags": [
    {
      "tag": "ERC-20",
      "test_cases": [
        {
          "id": "TOKEN-20-01",
          "test_case": "Transfer validation",
          "detailed_procedure": "\u2022 Transfer more tokens than balance\u2022 Transfer to zero address\u2022 Transfer zero amount\u2022 Verify balance updates and Transfer event emission",
          "pass_fail_criteria": "Insufficient balance reverts; zero address transfers handled per spec; events emitted correctly"
        },
        {
          "id": "TOKEN-20-02",
          "test_case": "Allowance mechanism",
          "detailed_procedure": "\u2022 Approve spender for specific amount\u2022 Attempt transferFrom exceeding allowance\u2022 Attempt transferFrom according to allowance",
          "pass_fail_criteria": "TransferFrom reverts when allowance exceeded and succeeds when transfer is according to it"
        },
        {
          "id": "TOKEN-20-03",
          "test_case": "Integer overflow/underflow",
          "detailed_procedure": "\u2022 Test transfers near uint256 max values\u2022 Approve maximum uint256 allowance\u2022 Test totalSupply overflow scenarios",
          "pass_fail_criteria": "All arithmetic operations safe; no wrap-around behavior; appropriate reverts on overflow"
        },
        {
          "id": "TOKEN-20-04",
          "test_case": "Decimals work properly",
          "detailed_procedure": "\u2022 Verify decimals() returns consistent value",
          "pass_fail_criteria": "Decimals immutable and consistent; fractional transfers work correctly"
        },
        {
          "id": "TOKEN-20-05",
          "test_case": "Return value validation",
          "detailed_procedure": "\u2022 Verify transfer() returns boolean\u2022 Test transferFrom() return value\u2022 Check approve() return value\u2022 Validate against ERC-20 specification compliance",
          "pass_fail_criteria": "All functions return correct boolean values per ERC-20 spec"
        },
        {
          "id": "TOKEN-20-06",
          "test_case": "Self-transfer does not duplicate balance",
          "detailed_procedure": "\u2022 User transfers tokens to himself\u2022 Compare the before and after balance",
          "pass_fail_criteria": "Balance must be the same, incorrect implementation can cause balance duplication"
        }
      ]
    },
    {
      "tag": "ERC-777",
      "test_cases": [
        {
          "id": "TOKEN-777-01",
          "test_case": "Operator authorization",
          "detailed_procedure": "\u2022 Authorize operator for token holder\u2022 Test operatorSend() functionality\u2022 Revoke operator authorization\u2022 Verify unauthorized operator cannot send\u2022 Test default operators",
          "pass_fail_criteria": "Only authorized operators can send; authorization/revocation works; default operators respected"
        },
        {
          "id": "TOKEN-777-02",
          "test_case": "ERC-20 backwards compatibility",
          "detailed_procedure": "\u2022 Call ERC-20 functions (transfer, approve, transferFrom)\u2022 Verify ERC-777 and ERC-20 state consistency\u2022 Test mixed usage of both interfaces\u2022 Check event emissions for both standards",
          "pass_fail_criteria": "Full ERC-20 compatibility maintained; state consistent across interfaces"
        },
        {
          "id": "TOKEN-777-03",
          "test_case": "Re-entrancy protection",
          "detailed_procedure": "\u2022 Create malicious hook that attempts re-entrant send\u2022 Test hook calling other token functions\u2022 Verify contract state during hook execution",
          "pass_fail_criteria": "Re-entrancy attacks blocked; state remains consistent during hooks"
        }
      ]
    },
    {
      "tag": "ERC-1155",
      "test_cases": [
        {
          "id": "TOKEN-1155-01",
          "test_case": "Multi-token transfers",
          "detailed_procedure": "\u2022 Transfer single token type\u2022 Batch transfer multiple token types\u2022 Transfer to multiple recipients\u2022 Verify balance updates for all token IDs",
          "pass_fail_criteria": "All transfers execute correctly; balances update accurately"
        },
        {
          "id": "TOKEN-1155-02",
          "test_case": "Approval management",
          "detailed_procedure": "\u2022 Set approval for all tokens\u2022 Test operator transfers with approval\u2022 Revoke approval and verify transfers fail",
          "pass_fail_criteria": "Approval system works correctly; operators can transfer when approved"
        },
        {
          "id": "TOKEN-1155-03",
          "test_case": "Safe transfer validation",
          "detailed_procedure": "\u2022 Transfer to contract implementing onERC1155Received\u2022 Transfer to contract without receiver function\u2022 Verify recipient validation for EOAs vs contracts",
          "pass_fail_criteria": "Safe transfers succeed only when receiver is an EOA or when it is a contract implementing the callback function"
        },
        {
          "id": "TOKEN-1155-04",
          "test_case": "URI metadata handling",
          "detailed_procedure": "\u2022 Query URI for existing token ID",
          "pass_fail_criteria": "URIs return correctly"
        },
        {
          "id": "TOKEN-1155-05",
          "test_case": "Safe from reentrancies",
          "detailed_procedure": "\u2022 Create malicious hook\u2022 Reenter into contract functions\u2022 Make sure state remains consistent or reverts",
          "pass_fail_criteria": "State must remain consistent or revert"
        }
      ]
    },
    {
      "tag": "Wrapped Token",
      "test_cases": [
        {
          "id": "TOKEN-W-01",
          "test_case": "Deposit/withdraw equivalence",
          "detailed_procedure": "\u2022 Deposit native token, verify wrapped token minted\u2022 Withdraw wrapped token, verify native token returned\u2022 Test 1:1 exchange rate maintained",
          "pass_fail_criteria": "Perfect 1:1 exchange rate is maintained"
        },
        {
          "id": "TOKEN-W-02",
          "test_case": "Fallback function behavior",
          "detailed_procedure": "\u2022 Send native token directly to contract address\u2022 Verify automatic wrapping occurs",
          "pass_fail_criteria": "Directly transferring to contract must automatically trigger wrapping"
        },
        {
          "id": "TOKEN-W-03",
          "test_case": "Reentrancy in withdraw",
          "detailed_procedure": "\u2022 Create malicious contract that reenters on withdraw\u2022 Reentrancies fail or state remaing consistent",
          "pass_fail_criteria": "Reentrancy must fail or the state must remain consistent"
        }
      ]
    },
    {
      "tag": "Burnable",
      "test_cases": [
        {
          "id": "TOKEN-B-01",
          "test_case": "Self-burn functionality",
          "detailed_procedure": "\u2022 Burn tokens from own balance\u2022 Attempt to burn more than balance\u2022 Verify totalSupply decreases correctly",
          "pass_fail_criteria": "Burns succeed within balance and fails when burning more than balance; totalSupply updated"
        },
        {
          "id": "TOKEN-B-02",
          "test_case": "Burn authorization",
          "detailed_procedure": "\u2022 Burn tokens from approved allowance\u2022 Test burnFrom without approval\u2022 Verify allowance decreases after burn\u2022 Test approval edge cases (infinite allowance)",
          "pass_fail_criteria": "Only authorized burns succeed; allowances updated correctly; burning with an infinite approval does not decrease allowance"
        },
        {
          "id": "TOKEN-B-03",
          "test_case": "Burn rate limiting",
          "detailed_procedure": "\u2022 Test burn amount limits per transaction\u2022 Verify burn cooldown periods",
          "pass_fail_criteria": "If there are burn limits, make sure they are enforced"
        },
        {
          "id": "TOKEN-B-04",
          "test_case": "Burn impact on holders",
          "detailed_procedure": "\u2022 Burn tokens and verify holder percentages increase\u2022 Test burn impact on reward distributions\u2022 Verify burn doesn't affect other holders' balances directly\u2022 Check proportional ownership changes",
          "pass_fail_criteria": "Burn increases remaining holder percentages; no direct balance changes to others"
        }
      ]
    },
    {
      "tag": "Mintable",
      "test_cases": [
        {
          "id": "TOKEN-M-01",
          "test_case": "Mint authorization",
          "detailed_procedure": "\u2022 Mint tokens from authorized minter account\u2022 Attempt mint from unauthorized account\u2022 Test role-based minting permissions\u2022 Verify minter role assignment/revocation",
          "pass_fail_criteria": "Only authorized accounts can mint; role management works correctly"
        },
        {
          "id": "TOKEN-M-02",
          "test_case": "Mint supply tracking",
          "detailed_procedure": "\u2022 Mint tokens and verify totalSupply increases\u2022 Test minting to zero address\u2022 Verify recipient balance increases correctly",
          "pass_fail_criteria": "TotalSupply tracks mints accurately; balances update correctly; events emitted"
        },
        {
          "id": "TOKEN-M-03",
          "test_case": "Mint rate limiting",
          "detailed_procedure": "\u2022 Test mint amount limits per transaction\u2022 Verify mint cooldown periods",
          "pass_fail_criteria": "If there are mint limits, make sure they are enforced"
        }
      ]
    },
    {
      "tag": "Pausable",
      "test_cases": [
        {
          "id": "TOKEN-P-01",
          "test_case": "Pause functionality",
          "detailed_procedure": "\u2022 Pause contract from authorized account\u2022 Attempt transfers while paused\u2022 Test minting/burning while paused\u2022 Verify pause state queries",
          "pass_fail_criteria": "All token operations halt when paused"
        },
        {
          "id": "TOKEN-P-02",
          "test_case": "Pause authorization",
          "detailed_procedure": "\u2022 Attempt pause from unauthorized account\u2022 Test role-based pause permissions\u2022 Verify unpause authorization requirements\u2022 Test emergency pause mechanisms",
          "pass_fail_criteria": "Only authorized accounts can pause/unpause; emergency mechanisms work"
        }
      ]
    },
    {
      "tag": "Upgradeable",
      "test_cases": [
        {
          "id": "TOKEN-U-01",
          "test_case": "Storage layout preservation",
          "detailed_procedure": "\u2022 Deploy initial implementation with user balances\u2022 Upgrade to new implementation\u2022 Verify all balances and allowances preserved\u2022 Test storage slot collision detection",
          "pass_fail_criteria": "All storage preserved across upgrades; no data corruption or loss"
        },
        {
          "id": "TOKEN-U-02",
          "test_case": "Upgrade authorization",
          "detailed_procedure": "\u2022 Attempt upgrade from unauthorized account\u2022 Verify timelock delays for upgrades",
          "pass_fail_criteria": "Only authorized accounts can upgrade; security measures enforced"
        },
        {
          "id": "TOKEN-U-03",
          "test_case": "Initialization protection",
          "detailed_procedure": "\u2022 Call initialize() on implementation contract\u2022 Attempt to initialize proxy multiple times\u2022 Test initialization with different parameters\u2022 Verify initializer modifiers work correctly",
          "pass_fail_criteria": "Implementation cannot be initialized; proxy initializes only once"
        }
      ]
    },
    {
      "tag": "Snapshot-enabled",
      "test_cases": [
        {
          "id": "TOKEN-S-01",
          "test_case": "Snapshot creation accuracy",
          "detailed_procedure": "\u2022 Create snapshot at specific block\u2022 Verify all current balances captured\u2022 Test snapshot after token transfers",
          "pass_fail_criteria": "Snapshots capture exact state at creation time"
        },
        {
          "id": "TOKEN-S-02",
          "test_case": "Historical balance queries",
          "detailed_procedure": "\u2022 Query balance at various snapshot IDs\u2022 Verify historical data accuracy\u2022 Test queries for non-existent snapshots",
          "pass_fail_criteria": "Historical queries return accurate data; error handling for invalid snapshots"
        },
        {
          "id": "TOKEN-S-03",
          "test_case": "Snapshot authorization",
          "detailed_procedure": "\u2022 Create snapshot from authorized account\u2022 Attempt snapshot creation from unauthorized account\u2022 Test automated snapshot triggers\u2022 Verify snapshot creation permissions",
          "pass_fail_criteria": "Only authorized accounts can create snapshots; automated triggers work"
        }
      ]
    },
    {
      "tag": "Deflationary",
      "test_cases": [
        {
          "id": "TOKEN-D-01",
          "test_case": "Burn tax calculation",
          "detailed_procedure": "\u2022 Transfer tokens and verify burn tax applied\u2022 Test tax calculation accuracy\u2022 Verify tax amount burned vs sent to recipient\u2022 Check tax exemptions for specific addresses",
          "pass_fail_criteria": "Tax calculated correctly; appropriate amount burned; exemptions work"
        },
        {
          "id": "TOKEN-D-02",
          "test_case": "Tax rate adjustment",
          "detailed_procedure": "\u2022 Modify burn tax rate via governance/owner\u2022 Test rate bounds and validation\u2022 Verify rate changes affect future transfers",
          "pass_fail_criteria": "Rate changes applied correctly; bounds enforced"
        },
        {
          "id": "TOKEN-D-03",
          "test_case": "Supply deflation tracking",
          "detailed_procedure": "\u2022 Monitor totalSupply over multiple taxed transfers\u2022 Verify deflation rate matches tax rate",
          "pass_fail_criteria": "Supply decreases at expected rate"
        }
      ]
    },
    {
      "tag": "Supply Cap Enforcement",
      "test_cases": [
        {
          "id": "TOKEN-SC-01",
          "test_case": "Maximum supply enforcement",
          "detailed_procedure": "\u2022 Set maximum supply cap\u2022 Mint tokens approaching the cap\u2022 Attempt to mint beyond cap\u2022 Verify minting stops exactly at cap",
          "pass_fail_criteria": "Minting impossible beyond cap; exact cap limit enforced"
        },
        {
          "id": "TOKEN-SC-02",
          "test_case": "Cap modification restrictions",
          "detailed_procedure": "\u2022 Attempt to increase cap from unauthorized account\u2022 Test cap decrease below current supply\u2022 Verify cap change authorization requirements",
          "pass_fail_criteria": "Cap changes properly authorized; cannot decrease below current supply"
        },
        {
          "id": "TOKEN-SC-03",
          "test_case": "Supply tracking accuracy",
          "detailed_procedure": "\u2022 Verify totalSupply tracking with mints/burns",
          "pass_fail_criteria": "Supply tracking accurate"
        }
      ]
    },
    {
      "tag": "Permit (EIP-2612)",
      "test_cases": [
        {
          "id": "TOKEN-PE-01",
          "test_case": "Signature validation",
          "detailed_procedure": "\u2022 Create valid permit signature\u2022 Test signature with wrong parameters\u2022 Verify signature replay protection\u2022 Test signature expiration handling\u2022 Check domain separator accuracy",
          "pass_fail_criteria": "Valid signatures accepted; invalid signatures rejected; replay protection works"
        },
        {
          "id": "TOKEN-PE-02",
          "test_case": "Nonce management",
          "detailed_procedure": "\u2022 Use permit with correct nonce\u2022 Attempt permit with used nonce\u2022 Test nonce increment mechanism\u2022 Verify per-user nonce tracking",
          "pass_fail_criteria": "Nonces prevent replay; increment correctly"
        }
      ]
    },
    {
      "tag": "Rebase Token",
      "test_cases": [
        {
          "id": "TOKEN-R-01",
          "test_case": "Rebase calculation accuracy",
          "detailed_procedure": "\u2022 Trigger positive rebase event\u2022 Verify all balances scale proportionally\u2022 Test negative rebase scaling\u2022 Check rebase multiplier precision\u2022 Verify totalSupply adjustment",
          "pass_fail_criteria": "All balances scale correctly; precision maintained; totalSupply accurate"
        },
        {
          "id": "TOKEN-R-02",
          "test_case": "Rebase timing control",
          "detailed_procedure": "\u2022 Test automated rebase triggers\u2022 Verify rebase frequency limits\u2022 Check manual rebase authorization",
          "pass_fail_criteria": "Rebase timing controlled correctly; frequency limits enforced"
        }
      ]
    },
    {
      "tag": "Fee-on-Transfer",
      "test_cases": [
        {
          "id": "TOKEN-FT-01",
          "test_case": "Transfer fee calculation",
          "detailed_procedure": "\u2022 Transfer tokens and verify fee deduction\u2022 Test fee calculation accuracy\u2022 Check fee recipient receives correct amount\u2022 Verify net amount received by recipient",
          "pass_fail_criteria": "Fees calculated correctly; proper distribution between recipient and fee collector"
        },
        {
          "id": "TOKEN-FT-02",
          "test_case": "Fee exemption mechanism",
          "detailed_procedure": "\u2022 Add address to fee exemption list\u2022 Test exempt address transfers\u2022 Verify exemption for specific transfer types\u2022 Check exemption authorization and management",
          "pass_fail_criteria": "Exempt addresses avoid fees; exemption management works correctly"
        },
        {
          "id": "TOKEN-FT-03",
          "test_case": "Fee rate adjustment",
          "detailed_procedure": "\u2022 Modify transfer fee rate via governance/owner\u2022 Test fee rate bounds validation\u2022 Verify rate changes affect future transfers",
          "pass_fail_criteria": "Rate changes applied correctly; bounds enforced"
        },
        {
          "id": "TOKEN-FT-04",
          "test_case": "Fee accumulation and distribution",
          "detailed_procedure": "\u2022 Accumulate fees over multiple transfers\u2022 Test fee distribution works correctly\u2022 Verify fee withdrawal mechanisms work correctly, including they actually existent\u2022 Verify unauthorized users are unable to receive fees",
          "pass_fail_criteria": "Fees accumulate correctly; distribution mechanisms work; withdrawal authorized properly; unauthorized users are unable to receive fees"
        }
      ]
    },
    {
      "tag": "Reflection",
      "test_cases": [
        {
          "id": "TOKEN-RF-01",
          "test_case": "Reward distribution mechanism",
          "detailed_procedure": "\u2022 Hold tokens and verify automatic reward accrual\u2022 Test reward calculation based on holdings\u2022 Check reward distribution triggers\u2022 Verify proportional reward allocation",
          "pass_fail_criteria": "Rewards distributed proportionally; automatic accrual works; calculations accurate"
        },
        {
          "id": "TOKEN-RF-02",
          "test_case": "Transfer impact on rewards",
          "detailed_procedure": "\u2022 Transfer tokens and verify reward tracking\u2022 Verify users are unable to duplicate rewards by constant transferring",
          "pass_fail_criteria": "Rewards track correctly during transfers; users are unable to constantly transfer tokens to duplicate rewards"
        }
      ]
    }
  ]
}