{
  "tag": "NFT",
  "categories": [
    {
      "tag": "ERC-721",
      "test_cases": [
        {
          "id": "NFT-ERC721-1",
          "test_case": "Safe transfer enforcement",
          "detailed_procedure": "1. Attempt to transfer NFT to a contract that implements onERC721Received.\n2. Attempt to transfer NFT to a contract that does not implement onERC721Received.",
          "pass_fail_criteria": "Transfer to non-receiver contract reverts; transfer to receiver contract succeeds."
        },
        {
          "id": "NFT-ERC721-2",
          "test_case": "Metadata mutation (dynamic updates)",
          "detailed_procedure": "1. Update metadata for a token.\n2. Query tokenURI before and after the update.",
          "pass_fail_criteria": "tokenURI reflects updated metadata after changes; unauthorized updates are rejected."
        },
        {
          "id": "NFT-ERC721-3",
          "test_case": "Royalties implementation (EIP-2981)",
          "detailed_procedure": "1. Query royaltyInfo for a token sale.\n2. Simulate a secondary sale.",
          "pass_fail_criteria": "Royalty recipient and amount are correct per EIP-2981; royalties are paid on secondary sales."
        },
        {
          "id": "NFT-ERC721-4",
          "test_case": "Lazy minting (on-demand creation)",
          "detailed_procedure": "1. Attempt to mint a token using a signed voucher or similar mechanism.",
          "pass_fail_criteria": "Token is minted only when valid proof is provided; unauthorized minting is rejected."
        },
        {
          "id": "NFT-ERC721-5",
          "test_case": "On-chain SVG/metadata",
          "detailed_procedure": "1. Query tokenURI.\n2. Verify that metadata and/or SVG image is generated fully on-chain.",
          "pass_fail_criteria": "tokenURI returns valid on-chain data; no external dependencies required."
        },
        {
          "id": "NFT-ERC721-6",
          "test_case": "NFT rentals / delegation",
          "detailed_procedure": "1. Delegate or rent an NFT to another address.\n2. Attempt to use or transfer it.",
          "pass_fail_criteria": "Delegated address can use NFT as intended; ownership is not transferred; rental period is enforced."
        },
        {
          "id": "NFT-ERC721-7",
          "test_case": "Soulbound (non-transferable) tokens",
          "detailed_procedure": "1. Attempt to transfer a soulbound token to another address.",
          "pass_fail_criteria": "Transfer of soulbound token is always rejected; only minting and burning are allowed."
        },
        {
          "id": "NFT-ERC721-8",
          "test_case": "Transfer lock / cooldown",
          "detailed_procedure": "1. Attempt to transfer a token before the cooldown or lock period.\n2. Attempt to transfer after the cooldown or lock period.",
          "pass_fail_criteria": "Transfer is only allowed after the cooldown/lock period has expired."
        },
        {
          "id": "NFT-ERC721-9",
          "test_case": "Reveal mechanism",
          "detailed_procedure": "1. Mint a token.\n2. Query metadata before the reveal event.\n3. Query metadata after the reveal event.",
          "pass_fail_criteria": "Metadata is hidden before reveal; correct metadata is shown after reveal."
        },
        {
          "id": "NFT-ERC721-10",
          "test_case": "Whitelist/OG-based mint",
          "detailed_procedure": "1. Attempt to mint as a whitelisted address.\n2. Attempt to mint as a non-whitelisted address.",
          "pass_fail_criteria": "Only whitelisted addresses can mint during restricted phase; others are rejected."
        },
        {
          "id": "NFT-ERC721-11",
          "test_case": "Minting phases (multi-stage distribution)",
          "detailed_procedure": "1. Attempt to mint during presale phase.\n2. Attempt to mint during public sale phase.\n3. Verify rules for each phase.",
          "pass_fail_criteria": "Minting rules and limits are enforced for each phase; transitions between phases work as intended."
        },
        {
          "id": "NFT-ERC721-12",
          "test_case": "Randomness integration (e.g., Chainlink VRF)",
          "detailed_procedure": "1. Mint a token that uses randomness for assignment.\n2. Verify the result.",
          "pass_fail_criteria": "Randomness is verifiable and unpredictable; token assignment is fair and cannot be manipulated."
        },
        {
          "id": "NFT-ERC721-13",
          "test_case": "Merkle proof whitelist validation",
          "detailed_procedure": "1. Mint with valid proof.\n2. Mint with invalid proof.\n3. Attempt to reuse a proof.",
          "pass_fail_criteria": "Valid proof mints succeed; invalid or reused proofs revert."
        },
        {
          "id": "NFT-ERC721-14",
          "test_case": "Token permit (gasless approval)",
          "detailed_procedure": "1. Sign and execute permit.\n2. Attempt to reuse or use expired signature.",
          "pass_fail_criteria": "Permit sets approval; reused or expired signatures revert."
        },
        {
          "id": "NFT-ERC721-15",
          "test_case": "Metadata freezing/locking",
          "detailed_procedure": "1. Update metadata.\n2. Freeze/lock metadata.\n3. Attempt update after freezing.",
          "pass_fail_criteria": "Updates succeed before freeze; post-freeze updates revert."
        },
        {
          "id": "NFT-ERC721-16",
          "test_case": "Token enumeration",
          "detailed_procedure": "1. Mint and transfer tokens.\n2. Query enumeration functions.\n3. Burn tokens and re-query.",
          "pass_fail_criteria": "Enumeration functions return correct tokens after operations."
        },
        {
          "id": "NFT-ERC721-17",
          "test_case": "Emergency pause mechanism",
          "detailed_procedure": "1. Pause and unpause contract.\n2. Attempt transfers and minting while paused.\n3. Verify pause events.",
          "pass_fail_criteria": "Only authorized can pause/unpause; paused functions revert; events emitted."
        },
        {
          "id": "NFT-ERC721-18",
          "test_case": "Contract upgrade security",
          "detailed_procedure": "1. Upgrade contract with authorized and unauthorized accounts.\n2. Test token functionality before and after upgrade.\n3. Verify data persistence.",
          "pass_fail_criteria": "Authorized upgrades succeed; unauthorized fail; data and functions remain correct."
        },
        {
          "id": "NFT-ERC721-19",
          "test_case": "Signature malleability resistance",
          "detailed_procedure": "1. Test EIP-712 signatures.\n2. Attempt replay and malleable signatures.\n3. Test after contract upgrade.",
          "pass_fail_criteria": "Only valid, unused signatures succeed; malleable or replayed signatures revert."
        },
        {
          "id": "NFT-ERC721-20",
          "test_case": "Oracle price feed integration",
          "detailed_procedure": "1. Connect to price oracle.\n2. Mint at different price points.\n3. Test fallback on oracle failure.",
          "pass_fail_criteria": "Mint price adjusts with oracle; fallback works; manipulation blocked."
        },
        {
          "id": "NFT-ERC721-21",
          "test_case": "Cross-platform metadata rendering",
          "detailed_procedure": "1. Generate metadata.\n2. Test rendering on major marketplaces.\n3. Validate special traits and media.",
          "pass_fail_criteria": "Metadata renders and displays correctly on all platforms."
        },
        {
          "id": "NFT-A-01",
          "test_case": "Unauthorized minting prevention",
          "detailed_procedure": "1. Deploy NFT contract with owner = address(0x123).\n2. Set minter role for address(0x456).\n3. Attempt mint() from unauthorized address(0x789).\n4. Expect revert with AccessControlUnauthorizedAccount(0x789, MINTER_ROLE).\n5. Verify totalSupply() unchanged.\n6. Attempt mint() from minter address - should succeed.",
          "pass_fail_criteria": "Unauthorized mints revert with specific error; authorized mints succeed; supply tracking accurate."
        },
        {
          "id": "NFT-A-02",
          "test_case": "Transfer authorization",
          "detailed_procedure": "1. Mint NFT tokenId=1 to Alice.\n2. Bob attempts transferFrom(Alice, Bob, 1) without approval.\n3. Expect revert ERC721InsufficientApproval.\n4. Alice calls approve(Bob, 1).\n5. Bob successfully transfers tokenId=1 to himself.\n6. Test setApprovalForAll() and operator transfers.",
          "pass_fail_criteria": "Unauthorized transfers blocked; approval system works; operator permissions respected."
        }
      ]
    },
    {
      "tag": "ERC-1155",
      "test_cases": [
        {
          "id": "NFT-ERC1155-1",
          "test_case": "Batch transfer validation",
          "detailed_procedure": "1. Mint multiple token IDs.\n2. Batch transfer with mismatched arrays (should fail).\n3. Batch transfer to receiver and non-receiver contracts.",
          "pass_fail_criteria": "Mismatched arrays revert; receiver contract succeeds; non-receiver reverts."
        },
        {
          "id": "NFT-ERC1155-2",
          "test_case": "Balance batch query consistency",
          "detailed_procedure": "1. Mint different token IDs.\n2. Query balances with balanceOfBatch and compare.\n3. Try balanceOfBatch with mismatched array lengths.",
          "pass_fail_criteria": "balanceOfBatch matches balanceOf; mismatched arrays revert; non-existent tokens return 0."
        },
        {
          "id": "NFT-ERC1155-3",
          "test_case": "Approval for all scope",
          "detailed_procedure": "1. Set and revoke operator approval.\n2. Attempt transfer by approved and revoked operator.\n3. Try self-approval.",
          "pass_fail_criteria": "Approval status correct; approved can transfer; revoked/self-approval cannot."
        },
        {
          "id": "NFT-ERC1155-4",
          "test_case": "URI generation",
          "detailed_procedure": "1. Mint tokens with different IDs.\n2. Query uri(tokenId).\n3. Check URI format and substitution.",
          "pass_fail_criteria": "URI schema and {id} substitution correct; points to valid metadata."
        },
        {
          "id": "NFT-ERC1155-5",
          "test_case": "Fungible/Non-fungible hybrid usage",
          "detailed_procedure": "1. Mint fungible and non-fungible tokens.\n2. Transfer partial and full amounts.\n3. Verify balances.",
          "pass_fail_criteria": "Fungible allows partial transfer; non-fungible as expected; over-transfer reverts."
        },
        {
          "id": "NFT-ERC1155-6",
          "test_case": "ERC1155Receiver validation",
          "detailed_procedure": "1. Transfer to correct and incorrect receiver contracts.\n2. Test high-gas receiver contract.",
          "pass_fail_criteria": "Correct receiver succeeds; incorrect fails; high-gas works within limits."
        },
        {
          "id": "NFT-ERC1155-7",
          "test_case": "ERC-1155 royalties (EIP-2981)",
          "detailed_procedure": "1. Set and update royalties.\n2. Query royaltyInfo.\n3. Try setting royalties above 100%.",
          "pass_fail_criteria": "royaltyInfo correct; updates reflect; over-100% reverts."
        },
        {
          "id": "NFT-ERC1155-8",
          "test_case": "Multi-token batch operations",
          "detailed_procedure": "1. Mint and transfer multiple token IDs.\n2. Batch transfer by operator.\n3. Burn tokens and verify balances.",
          "pass_fail_criteria": "Balances correct after operations; batch handles mixed IDs; events emitted."
        },
        {
          "id": "NFT-ERC1155-9",
          "test_case": "ERC-1155 metadata update mechanism",
          "detailed_procedure": "1. Set and update baseURI.\n2. Query URI before and after update.\n3. Attempt unauthorized update.",
          "pass_fail_criteria": "URI updates as expected; non-owner update fails; events emitted."
        },
        {
          "id": "NFT-ERC1155-10",
          "test_case": "Token ID range limits",
          "detailed_procedure": "1. Batch mint near boundaries.\n2. Query balances at extreme IDs.",
          "pass_fail_criteria": "No overflow at uint256 max; batch handles edge cases."
        },
        {
          "id": "NFT-ERC1155-11",
          "test_case": "URI substitution patterns",
          "detailed_procedure": "1. Set URI with {id} placeholder.\n2. Query URI for various IDs.\n3. Verify substitution.",
          "pass_fail_criteria": "{id} substituted with lowercase hex; leading zeros preserved; URI consistent."
        },
        {
          "id": "NFT-ERC1155-12",
          "test_case": "Token-bound delegation",
          "detailed_procedure": "1. Set approval for specific token ID.\n2. Transfer approved and unapproved tokens.",
          "pass_fail_criteria": "Operator can transfer approved token; cannot transfer unapproved; scopes enforced."
        },
        {
          "id": "NFT-ERC1155-13",
          "test_case": "Emergency pause mechanism",
          "detailed_procedure": "1. Pause and unpause contract.\n2. Attempt transfers and minting while paused.\n3. Verify pause events.",
          "pass_fail_criteria": "Only authorized can pause/unpause; paused functions revert; events emitted."
        },
        {
          "id": "NFT-ERC1155-14",
          "test_case": "Contract upgrade security",
          "detailed_procedure": "1. Upgrade contract with authorized and unauthorized accounts.\n2. Test token functionality before and after upgrade.\n3. Verify data persistence.",
          "pass_fail_criteria": "Authorized upgrades succeed; unauthorized fail; data and functions remain correct."
        },
        {
          "id": "NFT-ERC1155-15",
          "test_case": "Signature malleability resistance",
          "detailed_procedure": "1. Test EIP-712 signatures.\n2. Attempt replay and malleable signatures.\n3. Test after contract upgrade.",
          "pass_fail_criteria": "Only valid, unused signatures succeed; malleable or replayed signatures revert."
        },
        {
          "id": "NFT-ERC1155-16",
          "test_case": "Oracle price feed integration",
          "detailed_procedure": "1. Connect to price oracle.\n2. Mint at different price points.\n3. Test fallback on oracle failure.",
          "pass_fail_criteria": "Mint price adjusts with oracle; fallback works; manipulation blocked."
        },
        {
          "id": "NFT-ERC1155-17",
          "test_case": "Cross-platform metadata rendering",
          "detailed_procedure": "1. Generate metadata.\n2. Test rendering on major marketplaces.\n3. Validate special traits and media.",
          "pass_fail_criteria": "Metadata renders and displays correctly on all platforms."
        }
      ]
    }
  ]
}
